// This file was generated by counterfeiter
package fake

import (
	"sync"

	"github.com/phogolabs/parcello"
)

type Composer struct {
	ComposeStub        func(bundle *parcello.Bundle) error
	composeMutex       sync.RWMutex
	composeArgsForCall []struct {
		bundle *parcello.Bundle
	}
	composeReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Composer) Compose(bundle *parcello.Bundle) error {
	fake.composeMutex.Lock()
	fake.composeArgsForCall = append(fake.composeArgsForCall, struct {
		bundle *parcello.Bundle
	}{bundle})
	fake.recordInvocation("Compose", []interface{}{bundle})
	fake.composeMutex.Unlock()
	if fake.ComposeStub != nil {
		return fake.ComposeStub(bundle)
	}
	return fake.composeReturns.result1
}

func (fake *Composer) ComposeCallCount() int {
	fake.composeMutex.RLock()
	defer fake.composeMutex.RUnlock()
	return len(fake.composeArgsForCall)
}

func (fake *Composer) ComposeArgsForCall(i int) *parcello.Bundle {
	fake.composeMutex.RLock()
	defer fake.composeMutex.RUnlock()
	return fake.composeArgsForCall[i].bundle
}

func (fake *Composer) ComposeReturns(result1 error) {
	fake.ComposeStub = nil
	fake.composeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Composer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.composeMutex.RLock()
	defer fake.composeMutex.RUnlock()
	return fake.invocations
}

func (fake *Composer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ parcello.Composer = new(Composer)
