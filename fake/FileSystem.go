// This file was generated by counterfeiter
package fake

import (
	"net/http"
	"os"
	"path/filepath"
	"sync"

	"github.com/phogolabs/parcello"
)

type FileSystem struct {
	OpenStub        func(name string) (http.File, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		name string
	}
	openReturns struct {
		result1 http.File
		result2 error
	}
	WalkStub        func(dir string, fn filepath.WalkFunc) error
	walkMutex       sync.RWMutex
	walkArgsForCall []struct {
		dir string
		fn  filepath.WalkFunc
	}
	walkReturns struct {
		result1 error
	}
	OpenFileStub        func(name string, flag int, perm os.FileMode) (parcello.File, error)
	openFileMutex       sync.RWMutex
	openFileArgsForCall []struct {
		name string
		flag int
		perm os.FileMode
	}
	openFileReturns struct {
		result1 parcello.File
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FileSystem) Open(name string) (http.File, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Open", []interface{}{name})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(name)
	}
	return fake.openReturns.result1, fake.openReturns.result2
}

func (fake *FileSystem) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FileSystem) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].name
}

func (fake *FileSystem) OpenReturns(result1 http.File, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 http.File
		result2 error
	}{result1, result2}
}

func (fake *FileSystem) Walk(dir string, fn filepath.WalkFunc) error {
	fake.walkMutex.Lock()
	fake.walkArgsForCall = append(fake.walkArgsForCall, struct {
		dir string
		fn  filepath.WalkFunc
	}{dir, fn})
	fake.recordInvocation("Walk", []interface{}{dir, fn})
	fake.walkMutex.Unlock()
	if fake.WalkStub != nil {
		return fake.WalkStub(dir, fn)
	}
	return fake.walkReturns.result1
}

func (fake *FileSystem) WalkCallCount() int {
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	return len(fake.walkArgsForCall)
}

func (fake *FileSystem) WalkArgsForCall(i int) (string, filepath.WalkFunc) {
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	return fake.walkArgsForCall[i].dir, fake.walkArgsForCall[i].fn
}

func (fake *FileSystem) WalkReturns(result1 error) {
	fake.WalkStub = nil
	fake.walkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FileSystem) OpenFile(name string, flag int, perm os.FileMode) (parcello.File, error) {
	fake.openFileMutex.Lock()
	fake.openFileArgsForCall = append(fake.openFileArgsForCall, struct {
		name string
		flag int
		perm os.FileMode
	}{name, flag, perm})
	fake.recordInvocation("OpenFile", []interface{}{name, flag, perm})
	fake.openFileMutex.Unlock()
	if fake.OpenFileStub != nil {
		return fake.OpenFileStub(name, flag, perm)
	}
	return fake.openFileReturns.result1, fake.openFileReturns.result2
}

func (fake *FileSystem) OpenFileCallCount() int {
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	return len(fake.openFileArgsForCall)
}

func (fake *FileSystem) OpenFileArgsForCall(i int) (string, int, os.FileMode) {
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	return fake.openFileArgsForCall[i].name, fake.openFileArgsForCall[i].flag, fake.openFileArgsForCall[i].perm
}

func (fake *FileSystem) OpenFileReturns(result1 parcello.File, result2 error) {
	fake.OpenFileStub = nil
	fake.openFileReturns = struct {
		result1 parcello.File
		result2 error
	}{result1, result2}
}

func (fake *FileSystem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	fake.openFileMutex.RLock()
	defer fake.openFileMutex.RUnlock()
	return fake.invocations
}

func (fake *FileSystem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ parcello.FileSystem = new(FileSystem)
